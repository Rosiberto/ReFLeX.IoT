#version: "3.8"
services:

  # Orion is the context broker
  orion:
    image: fiware/orion:latest
    hostname: orion
    container_name: orion
    depends_on:
      - mongo
    networks:
      - reflex
    expose:
      - "1026"
    ports:
      - "1026:1026"
    command: -dbhost mongo -corsOrigin __ALL -logLevel DEBUG -noCache
    
  # Cygnus is configured to write context data
  cygnus:
    image: fiware/cygnus-ngsi:latest
    hostname: cygnus
    container_name: cygnus
    depends_on:
      - mongo
    networks:
      - reflex
    expose:
      - "5080"
    ports:
      - "5080:5080" 
      - "5050:5050"
      - "5051:5051"
    environment:
      - "CYGNUS_MULTIAGENT=true"
      - "CYGNUS_MONGO_HOSTS=mongo:27017"
      - "CYGNUS_LOG_LEVEL=DEBUG"
  
  agentjson:
    image: fiware/iotagent-json:latest
    hostname: agentjson
    container_name: agentjson
    depends_on:
      - mongo
    networks:
      - reflex
    expose:
      - "4041"
      - "7896"
    ports:
      - "4041:4041"
      - "7896:7896"
    environment:
      - "IOTA_CB_HOST=orion"
      - "IOTA_CB_PORT=1026"
      - "IOTA_NORTH_PORT=4041"
      - "IOTA_REGISTRY_TYPE=mongo"
      - "IOTA_MONGO_HOST=mongo"
      - "IOTA_MONGO_PORT=27017"
      - "IOTA_MONGO_DB=agentjson"
      - "IOTA_HTTP_PORT=7896"
      - "IOTA_PROVIDER_URL=http://agentjson:4041"
      
  # Databases - Orion uses Mongo-DB, Cygnus is persisting
  mongo:
    image: mongo:3.6
    hostname: mongo
    container_name: mongo
    networks:
      - reflex
    expose:
      - "27017"
    command: --bind_ip_all --smallfiles
    volumes:
      - mongo:/data
      
  # Databases - Orion uses Mysql, Cygnus is persisting
  mysql-db:
    restart: always
    image: mysql:5.7
    hostname: mysql
    container_name: mysql
    expose:
      - "3306"
    ports:
      - "3306:3306"
    networks:
      - reflex
    environment:
      - "MYSQL_ROOT_PASSWORD=123"
      - "MYSQL_ROOT_HOST=%"        
    volumes:
      - mysql:/data
# API                
  app:
    image: rosiberto/app-reflexiot:latest
    container_name: app
    ports:
      - "8000:5000"
    networks:
      - reflex
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    command: gunicorn -w 2 -b 0.0.0.0:5000 wsgi:server
  
  nginx:
    container_name: nginx
    restart: always
    build: ./nginx
    ports:
      - "80:80"
    networks:
      - reflex
    depends_on:
      - app 
  
  # grafana used for graphing mysql data
  grafana:
    image: grafana/grafana-oss:latest
    hostname: grafana
    container_name: grafana
    restart: unless-stopped
    ports:
        - 3000:3000
    networks:
        - reflex
    volumes:
        - grafana:/data
    depends_on:
        - mongo 
        - mysql-db
        - cygnus
        - orion


networks:
  reflex:
    driver: bridge
    
volumes:
  mongo: ~
  mysql: ~
<<<<<<< HEAD
  grafana: ~
=======
>>>>>>> c4dba440bd1d66dbef0cb471d5649ef823012efc
